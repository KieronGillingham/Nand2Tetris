// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


	Mux16 (a=instruction, b=ALUoutput, sel=instruction[15], out=aRegRoot);	// A register root selector

	Not (in=instruction[15], out=notOpCode);	
	Or (a=notOpCode, b=instruction[5], out=loadA); 

	And (a=instruction[15], b=instruction[3], out=writeM); // Only write to M if instruction is a C-instruction and Write M bit asserted.

	ARegister (in=aRegRoot, out=aReg, out[0..14]=addressM, load=loadA);	// A register


	And(a=instruction[4], b=instruction[15], out=writed);
	DRegister (in=ALUoutput, out=dReg, load=writed);	// D register

	Mux16 (b=inM, a=aReg, sel=instruction[12], out=dataInput);	// A / M input selector
	
	ALU (y=dataInput, x=dReg, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=zr, ng=ng);	// ALU

	// Jump logic

	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);	

	//J1 - jump if ALUoutput is negative
	And(a=instruction[2], b=instruction[15], out=jmpneg);
	And(a=jmpneg, b=ng, out=jumpIfNegative);

	//J2 - jump if ALUoutput is zero
	And(a=instruction[1], b=instruction[15], out=jmpzer);
	And(a=jmpzer, b=zr, out=jumpIfZero);

	//J3 - jump if ALUoutput is positive
	And(a=instruction[0], b=instruction[15], out=jmppos);
	And(a=jmppos, b=notng, out=jumpIfNotNegative);
	And(a=jumpIfNotNegative, b=notzr, out=jumpIfPositive);

	// If any jump condition is met, jump, otherwise increment to next instruction
	Or (a=jumpIfNegative, b=jumpIfZero, out=jumpIfNegativeOrZero);
	Or (a=jumpIfNegativeOrZero, b=jumpIfPositive, out=jumpConditionMet);
	
	// inc and load should always be opposites
	Not (in=jumpConditionMet, out=increment);

	PC (in=aReg, reset=reset, inc=increment, load=jumpConditionMet, out[0..14]=pc);	// Program counter
}